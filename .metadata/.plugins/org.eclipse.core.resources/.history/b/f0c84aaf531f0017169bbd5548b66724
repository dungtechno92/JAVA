package com.dungdv;

import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

public class ArrayList<E> {
	private static final int DEFAULT_CAPACITY = 10;
	private static final Object[] EMPTY_ELEMENTDATA = {};
	private transient Object[] elementData;
	private int size;
	
	public ArrayList() {
		elementData = new Object[DEFAULT_CAPACITY];
	}
	
	public E get(int index){
		return (E) elementData[index];
	}
	
	public void add(E object){
		if(size == elementData.length) {
			grow();
		}
		elementData[size] = object;
		size ++;
	}
	
	public E set(int index, E object){
		return object;
	}
	
	public void remove(int index){
		
	}
	
	public int size(){
		return size;
	}
	
	private void grow(){
		int oldCapacity = elementData.length;
		int newCapacity = oldCapacity + oldCapacity >> 1;
		
		elementData = Arrays.copyOf(elementData, newCapacity);
	}
	
	private void checkRange(int index){
		if(index >= size){
			throw new IndexOutOfBoundsException(outOfBoundsMessage(index));
		}
	}
	
	private String outOfBoundsMessage(int index){
		return "index " + index + "of size " + size;
	}
	
	public static void main(String[] args) {
		ArrayList<Integer> xxx = new ArrayList<Integer>();
		System.out.println(xxx.size());
	}
}
