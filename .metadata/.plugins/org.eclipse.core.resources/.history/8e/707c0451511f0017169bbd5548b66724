package com.dungdv;

import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

public class ArrayList<E> {
	private static final int DEFAULT_CAPACITY = 10;
	private static final Object[] EMPTY_ELEMENTDATA = {};
	private transient Object[] elementData;
	private int size;
	
	public ArrayList() {
		elementData = new Object[DEFAULT_CAPACITY];
	}
	
	E get(int index){
		return (E) elementData[index];
	}
	
	E add(E o){
		return o;
	}
	
	E set(int index, E o){
		return o;
	}
	
	void remove(int index){
		
	}
	
	private void checkRangeToAdd(){
		if(size == elementData.length){
			// Grow elementData
			
		}
	}
	
	private void grow(){
		int oldCapacity = elementData.length;
		int newCapacity = oldCapacity + oldCapacity >> 1;
		
		Object[] newElementData = new Object[newCapacity];
		elementData = Arrays.copyOf(elementData, newCapacity);
	}
	
	private void copy(Object[] newData, Object[] oldData){
		
	}
	
	private void checkRange(int index){
		if(index >= size){
			throw new IndexOutOfBoundsException(outOfBoundsMessage(index));
		}
	}
	
	private String outOfBoundsMessage(int index){
		return "index " + index + "of size " + size;
	}
	
	public static void main(String[] args) {
		System.out.println(111 >> 1);
	}
}
